name: Backend CD on develop branch

on:
  push:
    branches: [ "develop" ]

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write

jobs:
  test-and-docker-image-push:
    runs-on: ubuntu-latest

    steps:
      # git clone
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 서브모듈 불러오기
          submodules: true
          # 전체 히스토리 가져오기 (서브모듈 안정성 위해 권장)
          fetch-depth: 0
          # 중첩된 서브모듈까지 불러오기
          recursive: true
          token: ${{ secrets.PAT_FOR_SUBMODULE }}

      # Java 21 버전
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # GitHub Storage에 빌드 관련 파일들을 캐싱하여 빌드 속도 개선
      - name: Gradle Caching
        uses: actions/cache@v4
        # caches: 의존성 캐싱을 통해 의존성 다운로드 속도 개선
        # wrapper: Gradle 자체 캐싱을 통해 Gradle 다운로드 속도 개선
        # build-cache: gradle task 결과 캐싱을 통해 task 실행 속도 개선
        with:
          path: |
            ~/.gradle/caches 
            ~/.gradle/wrapper
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 빌드 진행(테스트 포함)
      - name: Build with Gradle
        run: ./gradlew build --no-configuration-cache

      # 테스트에 대한 리포트 작성
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      # 테스트 실패 시, 실패한 코드 라인에 Check 코멘트 등록
      - name: Comment to test failed code line
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          token: ${{ github.token }}

      # Github Container Registry 로그인
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_FOR_GHCR }}

      # Docker buildx 셋업
      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # repository owner 이름 소문자로 치환 (대문자 있으면 에러 발생하므로 꼭 필요)
      - name: set owner's name to lower case
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      # Docker 이미지 빌드 및 Github Container Registry에 push
      - name: Build and Push
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: .
          file: ./courseitda-backend-config/dev/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/courseitda-spring-dev:latest
            ghcr.io/${{ env.OWNER_LC }}/courseitda-spring-dev:dev-${{ github.run_number }}
